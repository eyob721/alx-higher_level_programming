============================================
Task 7: integer_validator(self, name, value)
============================================

This is a test file for a method of `BaseGeometry` class.
The method to be tested is the `def integer_validator(self, name, value):`
public instance method that validates the value of an integer.

Import module
=======================================

Import module
-------------
>>> module = __import__("7-base_geometry")

Import class
------------
>>> BaseGeometry = module.BaseGeometry

Documentation
=======================================

Check module documentation
--------------------------
>>> module.__doc__ != ""
True

Check class documentation
--------------------------
>>> BaseGeometry.__doc__ != ""
True

Check function documentation
--------------------------
>>> BaseGeometry().integer_validator.__doc__ != ""
True

Normal Cases
=======================================

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 29)

Edge Cases
=======================================

Check missing parameters
------------------------
>>> bg.integer_validator() #doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: ...

>>> bg.integer_validator("age") #doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: ...

Check type
----------
>>> bg = BaseGeometry()
>>> type(bg) is BaseGeometry
True

Check for type of value
-----------------------
>>> bg.integer_validator("length", "20")
Traceback (most recent call last):
...
TypeError: length must be an integer

>>> bg.integer_validator("length", True)
Traceback (most recent call last):
...
TypeError: length must be an integer

>>> bg.integer_validator("length", None)
Traceback (most recent call last):
...
TypeError: length must be an integer

>>> bg.integer_validator("length", [3])
Traceback (most recent call last):
...
TypeError: length must be an integer

>>> bg.integer_validator("length", (4,))
Traceback (most recent call last):
...
TypeError: length must be an integer

>>> bg.integer_validator("length", {3, 4})
Traceback (most recent call last):
...
TypeError: length must be an integer

Check for values of <= 0
------------------------
>>> bg.integer_validator("length", -10)
Traceback (most recent call last):
...
ValueError: length must be greater than 0

>>> bg.integer_validator("length", 0)
Traceback (most recent call last):
...
ValueError: length must be greater than 0

Check area
----------
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented
